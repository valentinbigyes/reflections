When would you want to use a remote repository rather than keeping all your work
local?

    To enable others to contribute to it, also when my local machine is offline. To save my work on a different machine than my local.
    To be able to work on several machines.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    I want to keep track of what changes have taken place in the remote before pulling them ont my machine. Especially before merging the remote commits into my branch, because I have to understand possible interactions.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    branch is only within a repository. Creating a branch adds a commit with a parent in the existing line and a new tip name.
    A remote is a branch that is not on the same machine. The remote does not have to be on github.
    clone makes a copy of a whole repository. It can work on a local machine or over several machines.
    A fork is a function only existing in the GitHub domain. It is a service GitHub provides. Forking clones a repository on GitHub Servers and assigns it to a new user, keeping a reference to the old autor.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    I can run a git diff master origin/master (the last being the latest state Inlnow of from the remote) and without having to be online understand what changed in the remote version while still working on my local versio seperately. Updating the local copy of the remote master without directly merging it into my local master is done by git fetch origin.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without Git or GitHub collaboration could be oranised via interfaces, the idea being that code doesn't mix up. All collaborators would have to work on a common set of assumptions and definitions and elements. But this would limit the flexibility enormously.
    It is harder to work on the same document (eg code) at the same time, because there would be a need to manually merge the documents regularly. And understanding and keeping track of the changes becomes so complex that it would be a real challenge.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    On my local machine I use a different branch to try out new additions while keeping a working version.
    When collaborating with others the master is there to be the common ground on which everybody can base his or hers work.
    If I would update the master with my individual changes, everbody would have to incorporate these changes into their work (merge them into their branches) - there would be the danger of changing something underneath their feet.
    Therefore the master brmanch is only updated in a collaborative way that ensures that everybodys needs are considered.
